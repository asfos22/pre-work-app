{"version":3,"sources":["CityPin.js","App.js","serviceWorker.js","index.js"],"names":["pinStyle","cursor","fill","stroke","CityPin","this","props","size","onClick","height","viewBox","style","transform","d","PureComponent","App","useState","latitude","longitude","zoom","width","viewport","setViewport","selectedShops","setSelectedShops","className","starbucksData","map","cities","key","properties","Postcode","e","preventDefault","City","mapboxApiAccessToken","process","mapStyle","onViewportChange","shops","geometry","coordinates","onClose","Store_Name","Street_Address","Timezone","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4vaAEA,IAIMA,EAAW,CAChBC,OAAQ,UACRC,KAAM,OACNC,OAAQ,QAGYC,E,iLACV,IAAD,EACuBC,KAAKC,MAD5B,IACAC,YADA,MACO,GADP,EACWC,EADX,EACWA,QAEnB,OACC,yBACCC,OAAQF,EACRG,QAAQ,YACRC,MAAK,KACDX,EADC,CAEJY,UAAU,aAAD,QAAgBL,EAAO,EAAvB,eAA+BA,EAA/B,SAEVC,QAASA,GAET,0BAAMK,EAxBA,iR,GAU2BC,iBCwEtBC,MA/Ef,WAAgB,IAAD,EACoBC,mBAAS,CAC1CC,SAAU,UACVC,UAAW,UACXC,KAAM,EACNV,OAAQ,OACRW,MAAO,SANM,mBACNC,EADM,KACIC,EADJ,OAS8BN,mBAAS,MATvC,mBASNO,EATM,KASSC,EATT,OAU4BR,mBAAS,IAVrC,mBAYd,OAZc,UAab,yBAAKS,UAAU,iBACd,yBAAKA,UAAU,QACd,yBAAKA,UAAU,UAAf,aACCC,IAAuBC,IAAI,SAACC,GAC5B,OACC,wBACCC,IAAKD,EAAOE,WAAWC,SACvBvB,QAAS,SAACwB,GACTA,EAAEC,iBACFT,EAAiBI,KAGjBA,EAAOE,WAAWI,SAKvB,yBAAKT,UAAU,OACd,kBAAC,IAAD,iBACKJ,EADL,CAECc,qBAAsBC,2FACtBC,SAAS,mDACTC,iBAAkB,SAACjB,GAClBC,EAAYD,MAGZK,IAAuBC,IAAI,SAACY,GAC5B,OACC,kBAAC,IAAD,CACCV,IAAKU,EAAMT,WAAWI,KACtBjB,SAAUsB,EAAMC,SAASC,YAAY,GACrCvB,UAAWqB,EAAMC,SAASC,YAAY,IAEtC,kBAAC,EAAD,CAASlC,KAAM,QAQjBgB,EACA,kBAAC,IAAD,CACCN,SAAUM,EAAciB,SAASC,YAAY,GAC7CvB,UAAWK,EAAciB,SAASC,YAAY,GAC9CC,QAAS,WACRlB,EAAiB,QAGlB,6BACC,yBAAKC,UAAU,YACd,4BAAKF,EAAcO,WAAWa,aAE/B,2BAAIpB,EAAcO,WAAWc,gBAC7B,2BAAIrB,EAAcO,WAAWI,MAC7B,2BAAIX,EAAcO,WAAWe,YAG5B,SChEWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.466b8c0b.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nconst ICON = `M20.2,15.7L20.2,15.7c1.1-1.6,1.8-3.6,1.8-5.7c0-5.6-4.5-10-10-10S2,4.5,2,10c0,2,0.6,3.9,1.6,5.4c0,0.1,0.1,0.2,0.2,0.3\r\n  c0,0,0.1,0.1,0.1,0.2c0.2,0.3,0.4,0.6,0.7,0.9c2.6,3.1,7.4,7.6,7.4,7.6s4.8-4.5,7.4-7.5c0.2-0.3,0.5-0.6,0.7-0.9\r\n  C20.1,15.8,20.2,15.8,20.2,15.7z`;\r\n\r\nconst pinStyle = {\r\n\tcursor: 'pointer',\r\n\tfill: '#d00',\r\n\tstroke: 'none'\r\n};\r\n\r\nexport default class CityPin extends PureComponent {\r\n\trender() {\r\n\t\tconst { size = 20, onClick } = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<svg\r\n\t\t\t\theight={size}\r\n\t\t\t\tviewBox=\"0 0 24 24\"\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...pinStyle,\r\n\t\t\t\t\ttransform: `translate(${-size / 2}px,${-size}px)`\r\n\t\t\t\t}}\r\n\t\t\t\tonClick={onClick}\r\n\t\t\t>\r\n\t\t\t\t<path d={ICON} />\r\n\t\t\t</svg>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { useState } from 'react';\nimport ReactMapGl, { Marker, Popup, FlyToInterpolator } from 'react-map-gl';\nimport * as starbucksData from './data/features.json';\nimport CityPin from './CityPin';\n\nfunction App() {\n\tconst [ viewport, setViewport ] = useState({\n\t\tlatitude: 26.449923,\n\t\tlongitude: 80.331871,\n\t\tzoom: 1,\n\t\theight: '100%',\n\t\twidth: '100%'\n\t});\n\n\tconst [ selectedShops, setSelectedShops ] = useState(null);\n\tconst [ gotoViewport, setGotoViewport ] = useState({});\n\n\treturn (\n\t\t<div className=\"map-container\">\n\t\t\t<div className=\"list\">\n\t\t\t\t<div className=\"header\">Starbucks</div>\n\t\t\t\t{starbucksData.features.map((cities) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ul\n\t\t\t\t\t\t\tkey={cities.properties.Postcode}\n\t\t\t\t\t\t\tonClick={(e) => {\n\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\tsetSelectedShops(cities);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{cities.properties.City}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div className=\"map\">\n\t\t\t\t<ReactMapGl\n\t\t\t\t\t{...viewport}\n\t\t\t\t\tmapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n\t\t\t\t\tmapStyle=\"mapbox://styles/ridam2/cjzrahywv36901cp8dlj4ff42\"\n\t\t\t\t\tonViewportChange={(viewport) => {\n\t\t\t\t\t\tsetViewport(viewport);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{starbucksData.features.map((shops) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Marker\n\t\t\t\t\t\t\t\tkey={shops.properties.City}\n\t\t\t\t\t\t\t\tlatitude={shops.geometry.coordinates[1]}\n\t\t\t\t\t\t\t\tlongitude={shops.geometry.coordinates[0]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CityPin size={20} />\n\t\t\t\t\t\t\t\t{/* <button className=\"marker\">\n\t\t\t\t\t\t\t\t\t<img src=\"/icons8_starbucks-48.png\" alt=\"coffee\" />\n\t\t\t\t\t\t\t\t</button> */}\n\t\t\t\t\t\t\t</Marker>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\n\t\t\t\t\t{selectedShops ? (\n\t\t\t\t\t\t<Popup\n\t\t\t\t\t\t\tlatitude={selectedShops.geometry.coordinates[1]}\n\t\t\t\t\t\t\tlongitude={selectedShops.geometry.coordinates[0]}\n\t\t\t\t\t\t\tonClose={() => {\n\t\t\t\t\t\t\t\tsetSelectedShops(null);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div className=\"map-name\">\n\t\t\t\t\t\t\t\t\t<h1>{selectedShops.properties.Store_Name}</h1>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<p>{selectedShops.properties.Street_Address}</p>\n\t\t\t\t\t\t\t\t<p>{selectedShops.properties.City}</p>\n\t\t\t\t\t\t\t\t<p>{selectedShops.properties.Timezone}</p>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</Popup>\n\t\t\t\t\t) : null}\n\t\t\t\t</ReactMapGl>\n\t\t\t\t{/* <h1>Hello I am here</h1> */}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}